Only 1 <h1> for per webpage. It acts as the title of the page.

Use <h> tags for hierarchy/structure of a webpage
same types of content should have the same <h>

lower <h> gets nested inside of higher <h>

CSS

text align start center end

images are inline element
if I just want the image in the center I can just use text align center to the parent of the image


Mesurements

px are the most used css mesurment 
but for font-size use rem, (best practice)
dont overwrite user preference
dont change the font size of the <html> tag

rem = font-size of the parent IE 16px
so use multiples of rem to have a consistent size
so if the user changes the defult font size the rest of the elements change consistently

line-height: 1.6; sets the line hight to 1.6x of the font size

margin -> wight space around an element box model
margin-block: 50px; adding 50px on block element, top and bottom?

everything in CSS is a box

inline-size = width
inline-size -> the size of the box in the line that it is taking up
block-size = hight

block -> top(start) and bottom(end)
inline -> left(start) and right(end)

use inline-size and block-size instead of width and height
it makes more logical naming

if u need more backgroud use padding

padding -> backgroud
border -> can use diffrent color from background

padding -> empty space that includes the backgroud color, around the border
margine -> empty space but no backgroud colour, around the content box

content box -> padding -> border -> margin 
holds content -> for more backgorud colour -> for adding border -> empty space with no colour used for seperating elemnts?

the cascade / specificity
first weight then order matters

inline > id > class/(sudo class) > <element> 
inline > <style> > <link to CSS>

class: element {

} <- Sudo Class, styes elements inside the class

element, element {

} <- styes both element or classes

element::element_2 {

} <- sudo element, element_2 was generated by the browser


img {
    max-inline-size: 100%;
    display: block;
} -> makes the image responsive, 100% of what? -> 100% of the parent
so image shrink and grow with there parents size, it will never be larger then the real res of the image
also set image to block 


display: grid;
grid-template-columns: 1fr 1fr; -> Create 2 col 

display: flex; -> Box take up space required for the content and can be use to create responsive degien
justify-content: space-between; -> Others exist see while working on projects


.two-column-layout {
    display: grid;
    gap: 60px;
}

@media (width > 600px) {
    .two-column-layout{
        grid-template-columns: 1fr 1fr;
    }
}

2 col layout will be stacked if screen size is below 600px
I may be able to also do so it creates 3 col layout then 2 then 1
